enum TypeCentreAdministratif {
    administration_cnss, administration_fiscale, administration_impot
}

enum CategorieActivite {
	M, 
	P, 
	C
}

enum CodeTVA {
    A, N, B, P
}

enum TypeDeclaration {
    DECLARATION_INITIALE, DECLARATION_RECTIFICATIVE
}

enum TypeDeclarationCnss {
    DECLARATION_INITIALE, DECLARATION_COMPLEMENTAIRE
}


enum TypeCnss {
    CNSS_GENERALE, CNSS_EMPLOYEUR
}

enum CodeAlert {
	//Declaration
    WARNING_DECLARATION_ANNUELLE_PRECEDENTE_INNEXISTANTE,
    WARNING_DECLARATION_ANNUELLE_PRECEDENTE_NON_VALIDE,
    WARNING_DECLARATION_ANNUELLE_INITIALE_NON_VALIDE,
    //Quittance
    WARNING_QUITTANCE_INITIALE_NON_VALIDE,
    WARNING_QUITTANCE_PRECEDENTE_NON_VALIDE,
    WARNING_QUITTANCE_PRECEDENTE_INEXISTANTE,
    //Acompte
    WARNING_ACOMPTE_PRECEDENTE_INEXISTANTE,
    WARNING_ACOMPTE_PRECEDENTE_NON_VALIDE,
    WARNING_ACOMPTE_INITIALE_NON_VALIDE
}

enum TypeAlert {
    error, warning, info, succss
}

enum CategorieClient {
	PERSONNE_PHYSIQUE, PERSONNE_MORALE
}

enum StatutDeclaration {
    BROUILLON, VALIDE, ARCHIVE, RECTIFIE
}

enum TypeValeur {
    TAUX, MONTANT
}

/**
* Region
*/

entity Comptable {
	id Long required,
	code String required unique,
	libelle String required,
    description String
}


/**
* Region
*/

entity Region {
	id Long required,
	code String required,
	libelle String required,
    description String
}

dto Region with mapstruct
service Region with serviceClass

/**
* Ville
*/

entity Ville {
	id Long required,
	code String required,
    codePostal String,
	libelle String required,
    description String
}

relationship ManyToOne {
	Ville{region(id required)} to Region
}

dto Ville with mapstruct
service Ville with serviceClass

/**
* Centre Adminiqtratif
*/

entity CentreAdministratif {
	id Long required,
	libelle String required,
    description String
	type TypeCentreAdministratif required,
    telephone1 String,
    telephone2 String,
    telephone3 String,
    email1 String,
    email2 String,
    email3 String,
    fax String,
    rib String,
    banque String,
    adresse String required,
    codePostal String required
}
relationship ManyToOne {
	CentreAdministratif{ville(id required)} to Ville required,
	CentreAdministratif{region(id required)} to Region required
}
dto CentreAdministratif with mapstruct
service CentreAdministratif with serviceClass

/**
* Activite
*/

entity Activite {
	id Long required,
	code String required,
	libelle String required,
    description String
    secteurActivite SecteurActivite required
}
relationship ManyToOne {
	Activite{SecteurActivite(id required)} to SecteurActivite required
}
dto Activite with mapstruct
service Activite with serviceClass

/**
* Impot Mensuel
*/

entity ImpotMensuel {
	id Long required,
	code String required,
    libelle String required,
    description String,
    parent Boolean , //default false,
    child Boolean , //default false,
    appliquerReportMontant Boolean , //default false,
    coefficientMontant Folat , //default 1f,
    //private List<ImpotMensuelLigne> impotMensuelLignes = new ArrayList<>();
    //private List<ImpotMensuel> childImpotMensuels = new ArrayList<>();
}
relationship ManyToOne {
	ImpotMensuel{parentImpotMensuel(id)} to ImpotMensuel
}
relationship OneToMany{
     ImpotMensuel{impotMensuelLignes(id)} to ImpotMensuelLigne,
     ImpotMensuel{childImpotMensuels(id)} to ImpotMensuel	 
}

dto ImpotMensuel with mapstruct
service ImpotMensuel with serviceClass

/**
* Fiche Client
*/

entity FicheClient {
	id Long required,
	categorieClient CategorieClient required,
    designation String required,
    logo ImageBlob,
    copieCIN ImageBlob,
	copiePatente ImageBlob,
	copieRC ImageBlob,
    cinGerant pattern(/^\d{5,}$/) ,
    dateDelivranceCINGerant LocalDate,
    adresse String required,
    codePostal String required,
    telephone1 String,
    telephone2 String,
    telephone3 String,
    fax String,
    email1 String,
    email2 String,
    email3 String,
    matriculeFiscale String required,
    registreCommerce String,  
    dateCreation LocalDate,
    cnssEmployeur String,
    cnssGerant String,
    fichierPatente Blob	,
	categorieActivite CategorieActivite required,
	codeTva CodeTVA required,		
    numeroEtablissementSecondaire String , //default "000",
    tauxCnssAccident Double required,
    fichierPatenteContentType String required,
    //private List<ImpotMensuelClient> impotMensuelClients = new ArrayList<>();
}
relationship ManyToOne {
	FicheClient{centreAdministratif(libelle)} to CentreAdministratif,
    FicheClient{activite1(libelle required)} to Activite,
    FicheClient{activite2(libelle)} to Activite,
    FicheClient{activite3(libelle)} to Activite,
    FicheClient{secteurActivite1(libelle required)} to SecteurActivite,
    FicheClient{secteurActivite2(libelle)} to SecteurActivite,
    FicheClient{secteurActivite3(libelle)} to SecteurActivite,
    FicheClient{region(libelle required)} to Region,
    FicheClient{ville(libelle required)} to Ville,
    FicheClient{categorieCnssGerant(libelle required)} to CategorieCnssGerant
}
relationship OneToMany{
     FicheClient{impotMensuelClients(id)} to ImpotMensuelClient 
}
dto FicheClient with mapstruct
service FicheClient with serviceClass
paginate FicheClient with pagination

/**
* CNSS
*/

entity Cnss {
	id Long required,
	annee Integer required,
    trimestre Integer required,
    date LocalDate,
    numeroQuittance String,
	montantSalaireBrutNormal BigDecimal,
    montantSalaireBrutKarama BigDecimal,
	typeCnss TypeCnss required,
    typeDeclaration TypeDeclarationCnss required defaut TypeDeclarationCnss.DECLARATION_INITIALE,   
    tauxCnssNormal BigDecimal,
    tauxCnssKarama BigDecimal,
    tauxCnssNormalAccident BigDecimal,    
    tauxCnssKaramaAccident BigDecimal,
    montantCnssNormal BigDecimal,
    montantCnssKarama BigDecimal,
    montantTotalCnss BigDecimal,
    montantTotalSalaireBrut BigDecimal
}
relationship ManyToOne {
    Cnss{ficheClient(id required)} to FicheClient,
}
dto Cnss with mapstruct
service Cnss with serviceClass
paginate Cnss with pagination

/**
* Impot Mensuel Client
*/

entity ImpotMensuelClient {
	id Long required,
	mois Integer required,
	applicable Boolean , //default true
}
relationship ManyToOne {
    ImpotMensuelClient{ficheClient(id required)} to FicheClient,
    ImpotMensuelClient{impotMensuel(id required)} to ImpotMensuel,
}
dto ImpotMensuelClient with mapstruct
service ImpotMensuelClient with serviceClass
paginate ImpotMensuelClient with pagination

/**
* Quittance Mensuelle Impot
*/

entity QuittanceMensuelle {
	id Long required,
    annee Integer required,
	mois Integer required,
    numeroQuittance String,
    datePaiement LocalDate,
    montantTotal BigDecimal,	
    typeDeclaration TypeDeclaration , //default TypeDeclaration.DECLARATION_INITIALE required,	
    statut StatutDeclaration required  , //default StatutDeclaration.BROUILLON,
    //private List<QuittanceMensuelleLine> quittanceMensuelleLines = new ArrayList<>();
}
relationship ManyToOne {
    QuittanceMensuelle{ficheClient(id required)} to FicheClient,
    QuittanceMensuelle{parentQuittance(id)} to QuittanceMensuelle,
}
relationship OneToMany{
     QuittanceMensuelle{quittanceMensuelleLines(id)} to QuittanceMensuelleLine
}

dto QuittanceMensuelle with mapstruct
service QuittanceMensuelle with serviceClass
paginate QuittanceMensuelle with pagination

/**
* Quittance Mensuelle Impot Line
*/

entity QuittanceMensuelleLine {
	id Long required,
    montantTotal BigDecimal,
    code String,
    libelle String,
    description String,
    parent Boolean , //default Boolean.FALSE,
    child Boolean , //default Boolean.FALSE,
    appliquerReportMontant Boolean , //default Boolean.FALSE,
    montantReport BigDecimal , //default BigDecimal.ZERO,
    coefficientMontant Float , //default 1f
	//private List<QuittanceMensuelleLine> childQuittanceMensuelleLines = new ArrayList<>();
    //private List<QuittanceMensuelleSousLine> quittanceMensuelleSousLines = new ArrayList<>();
}

relationship ManyToOne {
    QuittanceMensuelleLine{parentQuittanceMensuelleLine(id)} to QuittanceMensuelle,
    QuittanceMensuelleLine{impotMensuel(id required)} to ImpotMensuel
}
relationship OneToMany{
     QuittanceMensuelleLine{quittanceMensuelleSousLines(id)} to QuittanceMensuelleSousLine,
     QuittanceMensuelleLine{childQuittanceMensuelleLines(id)} to QuittanceMensuelleLine
}

dto QuittanceMensuelleLine with mapstruct
service QuittanceMensuelleLine with serviceClass
paginate QuittanceMensuelleLine with pagination


/**
* Quittance Mensuelle Impot Sous Line
*/

entity QuittanceMensuelleSousLine {
	id Long required,
    montantBase BigDecimal,
    montantTotal BigDecimal
}

relationship ManyToOne {
    QuittanceMensuelleSousLine{quittanceMensuelleLine(id required)} to QuittanceMensuelleLine,
    QuittanceMensuelleSousLine{impotMensuelLine(id required)} to ImpotMensuelLine
}

dto QuittanceMensuelleSousLine with mapstruct
service QuittanceMensuelleSousLine with serviceClass
paginate QuittanceMensuelleSousLine with pagination

/**
* Declaration Annuelle
*/

entity DeclarationAnnuelle {
	id Long required,
	annee Integer required,
    datePaiement LocalDate,
    numeroQuittance String,
	montantChiffreAffaireHT BigDecimal,
    montantChiffreAffaireExport BigDecimal,
    montantChiffreAffaireLocal BigDecimal,
    montantChiffreAffaireTTC BigDecimal,
    montantResultatComptable BigDecimal,
    montantResultatFiscal BigDecimal,
    montantAutreDeduction BigDecimal,
    montantBaseImposable BigDecimal,
    montantImpotLiquide BigDecimal,
    montantAcompteProvisionnel BigDecimal,
    montantRetenueSource BigDecimal,
    montantNetAPaye BigDecimal,
}

relationship ManyToOne {
    DeclarationAnnuelle{ficheClient(id required)} to FicheClient,
}

dto DeclarationAnnuelle with mapstruct
service DeclarationAnnuelle with serviceClass
paginate DeclarationAnnuelle with pagination

/**
* Declaration Employeur Annuelle
*/

entity DeclarationEmployeurAnnuelle {
	id Long required,
	annee Integer required,
	montantAnnexe1 BigDecimal,
    montantAnnexe2 BigDecimal,
    montantAnnexe3 BigDecimal,
    montantAnnexe4 BigDecimal,
    montantAnnexe5 BigDecimal,
    montantAnnexe6 BigDecimal,
    montantAnnexe7 BigDecimal,
    montantAnnexe8 BigDecimal,
    montantAnnexe9 BigDecimal,
    montantAnnexe10 BigDecimal,
    montantAnnexe11 BigDecimal,
    montantAnnexe12 BigDecimal
}

relationship ManyToOne {
    DeclarationEmployeurAnnuelle{ficheClient(id required)} to FicheClient,
}

dto DeclarationEmployeurAnnuelle with mapstruct
service DeclarationEmployeurAnnuelle with serviceClass
paginate DeclarationEmployeurAnnuelle with pagination

/**
* Categorie Cnss Gerant
*/

entity CategorieCnssGerant {
	id Long required,
    code String required,
    String libelle code String required,
    String description code String,
    montantCotisationCnss BigDecimal
}
dto CategorieCnssGerant with mapstruct
service CategorieCnssGerant with serviceClass
paginate CategorieCnssGerant with pagination

/**
* Decalration Annuelle
*/

entity DeclarationAnnuelle {
	id Long required,
    typeDeclaration TypeDeclaration , //default TypeDeclaration.DECLARATION_INITIALE required,
    annee Integer required,
    datePaiement LocalDate,
    numeroQuittance String,
    montantImpotAnnuel  BigDecimal , //default BigDecimal.ZERO,
    montantApPayes  BigDecimal , //default BigDecimal.ZERO,
    montantRetenueSource  BigDecimal , //default BigDecimal.ZERO,
    montantReportAnterieur  BigDecimal , //default BigDecimal.ZERO,
    montantNet  BigDecimal , //default BigDecimal.ZERO,
    statut StatutDeclaration required  , //default StatutDeclaration.BROUILLON,
    //private List<DecalrationAnnuelleLine> declarationAnnuelleLines = new ArrayList<>();
}
relationship ManyToOne {
    DeclarationAnnuelle{ficheClient(id required)} to FicheClient
}

relationship OneToMany{
     DeclarationAnnuelle{declarationAnnuelleLines(id)} to DecalrationAnnuelleLine
}

dto DeclarationAnnuelle with mapstruct
service DeclarationAnnuelle with serviceClass
paginate DeclarationAnnuelle with pagination

/**
* Decalration Annuelle Line
*/

entity DecalrationAnnuelleLine {
	id Long required,
    code String required,
    triOrdre Integer,
    calcule Boolean,
    montant BigDecimal,
    montantCalcule BigDecimal,
    libelle String required,
    description String
}
relationship ManyToOne {
    DecalrationAnnuelleLine{impotAnnuel(id required)} to ImpotAnnuel,
    DecalrationAnnuelleLine{declarationAnnuelle(id required)} to DeclarationAnnuelle,
}
dto DecalrationAnnuelleLine with mapstruct
service DecalrationAnnuelleLine with serviceClass
paginate DecalrationAnnuelleLine with pagination

/**
* Acompte Provisionnel
*/

entity AcompteProvisionnel {
	id Long required,
	annee Integer required,
    numero Integer required,
    date LocalDate,
    numeroQuittance String,
	montantBase BigDecimal,
    montantAcompteProvisionnel BigDecimal,
    montantReportAnterieur BigDecimal,
    montantRetenueSource BigDecimal,
    montantNet BigDecimal,
	typeDeclaration TypeDeclaration , //default TypeDeclaration.DECLARATION_INITIALE required,
    montantNet BigDecimal,
    statut StatutDeclaration required  , //default StatutDeclaration.BROUILLON,
}
relationship ManyToOne {
    AcompteProvisionnel{ficheClient(id required)} to FicheClient
}
dto AcompteProvisionnel with mapstruct
service AcompteProvisionnel with serviceClass
paginate AcompteProvisionnel with pagination

/**
* ImpotAnnuel
*/

entity ImpotAnnuel {
	id Long required,
    code String required,
    libelle String required,
    description String,
    calcule Boolean , //default false,
    triOrdre Integer,
    //private List<ImpotAnnuelLine> impotAnnuelLines = new ArrayList<>();
}
relationship OneToMany{
     ImpotAnnuel{impotAnnuelLines(id required)} to ImpotAnnuelLine
}

dto ImpotAnnuel with mapstruct
service ImpotAnnuel with serviceClass
paginate ImpotAnnuel with pagination

/**
* ImpotAnnuelLine
*/
entity ImpotAnnuelLine {
	id Long required,
    coefficient Float required , //default 1f
}
relationship ManyToOne {
    ImpotAnnuelLine{impotAnnuel(id required)} to ImpotAnnuel,
    ImpotAnnuelLine{impotMensuelLine(id required)} to ImpotMensuelLine
}
dto ImpotAnnuelLine with mapstruct
service ImpotAnnuelLine with serviceClass
paginate ImpotAnnuelLine with pagination

/**
* ImpotMensuelLine
*/

entity ImpotMensuelLine {
	id Long required,
    code String required,
	libelle String required,
	description description,
    triOrdre Integer,
    valeur Float,
    typeValeur TypeValeur required , //default TypeValeur.TAUX,
    valeurModifiable Boolean , //default false
}
relationship ManyToOne {
    ImpotMensuelLine{impotMensuel(id required)} to ImpotMensuel
}
dto ImpotMensuelLine with mapstruct
service ImpotMensuelLine with serviceClass
paginate ImpotMensuelLine with pagination

/**
* Secteur activite
*/

entity SecteurActivite {
	id Long required,
    code String required,
    libelle String required,
    description String
}
dto SecteurActivite with mapstruct
service SecteurActivite with serviceClass
paginate SecteurActivite with pagination
