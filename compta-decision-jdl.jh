//application {
//  config {
//    baseName comptaDecision
//    applicationType monolith
//	cacheProvider hazelcast
//	clientTheme cosmo
//	clientThemeVariant	primary
//	databaseType sql
//	prodDatabaseType postgresql
//	languages [fr, ar]
//	packageName	com.growup.comptadecision
//	testFrameworks [cucumber]
//  }
//  entities *
//}

enum TypeCentreAdministratif {
    ADMINISTRATION_CNSS, ADMINISTRATION_FISCALE, ADMINISTRATION_IMPOT
}

enum CategorieActivite {
	M,
	P,
	C
}

enum CodeTVA {
    A, N, B, P
}

enum TypeDeclaration {
    DECLARATION_INITIALE, DECLARATION_RECTIFICATIVE
}

enum TypeDeclarationCnss {
    DECLARATION_INITIALE, DECLARATION_COMPLEMENTAIRE
}


enum TypeCnss {
    CNSS_GENERALE, CNSS_EMPLOYEUR
}

enum CodeAlert {
	//Declaration
    WARNING_DECLARATION_ANNUELLE_PRECEDENTE_INNEXISTANTE,
    WARNING_DECLARATION_ANNUELLE_PRECEDENTE_NON_VALIDE,
    WARNING_DECLARATION_ANNUELLE_INITIALE_NON_VALIDE,
    //Quittance
    WARNING_QUITTANCE_INITIALE_NON_VALIDE,
    WARNING_QUITTANCE_PRECEDENTE_NON_VALIDE,
    WARNING_QUITTANCE_PRECEDENTE_INEXISTANTE,
    //Acompte
    WARNING_ACOMPTE_PRECEDENTE_INEXISTANTE,
    WARNING_ACOMPTE_PRECEDENTE_NON_VALIDE,
    WARNING_ACOMPTE_INITIALE_NON_VALIDE
}

enum TypeAlert {
    ERROR, WARNIG, INFO, SUCCESS
}

enum CategorieClient {
	PERSONNE_PHYSIQUE, PERSONNE_MORALE
}

enum StatutDeclaration {
    BROUILLON, VALIDE, ARCHIVE, RECTIFIE
}

enum TypeValeur {
    TAUX, MONTANT
}

/**
* Region
*/

entity Region {
	code String required,
	libelle String required,
    description String
}

/**
* Ville
*/

entity Ville {
	code String required,
    codePostal String,
	libelle String required,
    description String
}

relationship ManyToOne {
	Ville{region(libelle) required} to Region
}

/**
* Centre Adminiqtratif
*/

entity CentreAdministratif {
	libelle String required,
    description String
	type TypeCentreAdministratif required,
    telephone1 String,
    telephone2 String,
    telephone3 String,
    email1 String,
    email2 String,
    email3 String,
    fax String,
    rib String,
    banque String,
    adresse String required,
    codePostal String required
}
relationship ManyToOne {
	CentreAdministratif{ville(libelle) required} to Ville,
	CentreAdministratif{region(libelle) required} to Region
}

/**
* Activite
*/

entity Activite {
	code String required,
	libelle String required,
    description String
}
relationship ManyToOne {
	Activite{SecteurActivite(libelle) required} to SecteurActivite
}

/**
* Impot Mensuel
*/

entity ImpotMensuel {
	code String required,
    libelle String required,
    description String,
    parent Boolean , //default false,
    child Boolean , //default false,
    appliquerReportMontant Boolean , //default false,
    coefficientMontant Float , //default 1f,
    //private List<ImpotMensuelLigne> impotMensuelLignes = new ArrayList<>();
    //private List<ImpotMensuel> childImpotMensuels = new ArrayList<>();
}
//relationship ManyToOne {
//	ImpotMensuel{parentImpotMensuel(id)} to ImpotMensuel
//}

relationship OneToMany{
     ImpotMensuel{impotMensuelLigne} to ImpotMensuelLigne{impotMensuel},
     ImpotMensuel{childImpotMensuel} to ImpotMensuel{parentImpotMensuel}
}

/**
* Application User
**/

entity ApplicationUser {
  matricule String,
  poste String required,
  dateEmbauche String
}
relationship ManyToOne {
  ApplicationUser{cabinetComptable(code)} to CabinetComptable
}

relationship OneToOne {
  FicheClient{internalUser(id)} to User
}

/**
* Chaque utilisateur est en charge d une luste définie de clients
*/
//relationship ManyToMany {
//  ApplicationUser{id} to FicheClient
//}

/**
* Chaque Utilisateur peut avoir une limitation d'accès
* à une liste définie de clients de son cabinet comptable
**/

entity ApplicationUserFicheClient {

}

relationship ManyToOne {
  ApplicationUserFicheClient{ficheClient(designation) required} to FicheClient
  ApplicationUserFicheClient{applicationUser(id) required} to ApplicationUser
}

/**
* Fiche Client
*/

entity FicheClient {
	categorieClient CategorieClient required,
    designation String required,
	prenomGerant String,
	nomGerant String,
	dateNaissanceGerant LocalDate,
	copieCIN ImageBlob,
	adresseGerant String,
	telephoneGerant1 String,
	telephoneGerant2 String,
	emailGerant String,
    cinGerant String,
    dateDelivranceCINGerant LocalDate,
    copieCINGerant ImageBlob,
	copiePatente ImageBlob,
	logo ImageBlob,
	copieRC ImageBlob,
    cinGerant String,
    dateDelivranceCINGerant LocalDate,
    adresse String required,
    codePostal String required,
    telephone1 String,
    telephone2 String,
    telephone3 String,
    fax String,
    email1 String,
    email2 String,
    email3 String,
    matriculeFiscale String required,
    registreCommerce String,
    dateCreation LocalDate,
    cnssEmployeur String,
    cnssGerant String,
    fichierPatente Blob	,
	categorieActivite CategorieActivite required,
	codeTVA CodeTVA required,
    numeroEtablissementSecondaire String , //default "000",
    tauxCnssAccident Double required,
    //private List<ImpotMensuelClient> impotMensuelClients = new ArrayList<>();
}
relationship ManyToOne {
	FicheClient{centreAdministratif(libelle)} to CentreAdministratif,
    FicheClient{activite1(libelle) required} to Activite,
    FicheClient{activite2(libelle)} to Activite,
    FicheClient{activite3(libelle)} to Activite,
    FicheClient{secteurActivite1(libelle) required} to SecteurActivite,
    FicheClient{secteurActivite2(libelle)} to SecteurActivite,
    FicheClient{secteurActivite3(libelle)} to SecteurActivite,
    FicheClient{region(libelle) required} to Region,
    FicheClient{ville(libelle) required} to Ville,
    FicheClient{categorieCnssGerant(libelle) required} to CategorieCnssGerant
    //createdBy
    //lastModifiedBy
    //createdDate
    //lastModifiedBy
    //administrationCnssId
    //administrationFiscaleId
    //administrationImpotId
    //cabinet_comptable_id
    //code_categorie
    //email
    //email2
    //lieu_delivrance_cin_gerant
    //lieu_naissance_gerant
    //monbre_mois_frais_cabinet
    //taux_cnss_karama
    //taux_cnss_normal
    //telephone
    //telephone_2
    //telephone2
    //telephone3
    //telephone_gerant1
    //telephone_gerant2


}
relationship OneToMany{
     FicheClient{impotMensuelClient} to ImpotMensuelClient{ficheClient}
}

/**
* CNSS
*/

entity Cnss {
	annee Integer required,
    trimestre Integer required,
    date LocalDate,
    numeroQuittance String,
	montantSalaireBrutNormal BigDecimal,
    montantSalaireBrutKarama BigDecimal,
	typeCnss TypeCnss required,
    typeDeclaration TypeDeclarationCnss required //default TypeDeclarationCnss.DECLARATION_INITIALE,
    tauxCnssNormal BigDecimal,
    tauxCnssKarama BigDecimal,
    tauxCnssNormalAccident BigDecimal,
    tauxCnssKaramaAccident BigDecimal,
    montantCnssNormal BigDecimal,
    montantCnssKarama BigDecimal,
    montantTotalCnss BigDecimal,
    montantTotalSalaireBrut BigDecimal
}
relationship ManyToOne {
    Cnss{ficheClient(designation) required} to FicheClient,
}

/**
* Impot Mensuel Client
*/

entity ImpotMensuelClient {
	mois Integer required,
	applicable Boolean , //default true
}
relationship ManyToOne {
    //ImpotMensuelClient{ficheClient(designation) required} to FicheClient,
    ImpotMensuelClient{impotMensuel(id) required} to ImpotMensuel,
}

/**
* Quittance Mensuelle Impot
*/

entity QuittanceMensuelle {
    annee Integer required,
	mois Integer required,
    numeroQuittance String,
    datePaiement LocalDate,
    montantTotal BigDecimal,
    typeDeclaration TypeDeclaration , //default TypeDeclaration.DECLARATION_INITIALE required,
    statut StatutDeclaration required  , //default StatutDeclaration.BROUILLON,
    //private List<QuittanceMensuelleLigne> quittanceMensuelleLignes = new ArrayList<>();
}
relationship ManyToOne {
    QuittanceMensuelle{ficheClient(designation) required} to FicheClient,
    QuittanceMensuelle{parentQuittance(id)} to QuittanceMensuelle,
}
relationship OneToMany{
     QuittanceMensuelle{quittanceMensuelleLigne} to QuittanceMensuelleLigne
}

/**
* Quittance Mensuelle Impot Ligne
*/

entity QuittanceMensuelleLigne {
    montantTotal BigDecimal,
    code String,
    libelle String,
    description String,
    parent Boolean , //default Boolean.FALSE,
    child Boolean , //default Boolean.FALSE,
    appliquerReportMontant Boolean , //default Boolean.FALSE,
    montantReport BigDecimal , //default BigDecimal.ZERO,
    coefficientMontant Float , //default 1f
	//private List<QuittanceMensuelleLigne> childQuittanceMensuelleLignes = new ArrayList<>();
    //private List<QuittanceMensuelleSousLigne> quittanceMensuelleSousLignes = new ArrayList<>();
}

relationship ManyToOne {
    //QuittanceMensuelleLigne{quittanceMensuelleLigne(id)} to QuittanceMensuelle,
	QuittanceMensuelleLigne{parentQuittanceMensuelleLigne(id)} to QuittanceMensuelleLigne,
    QuittanceMensuelleLigne{impotMensuel(id) required} to ImpotMensuel
}
relationship OneToMany{
     QuittanceMensuelleLigne{quittanceMensuelleSousLigne} to QuittanceMensuelleSousLigne{quittanceMensuelleLigne},
//     QuittanceMensuelleLigne{childQuittanceMensuelleLigne} to QuittanceMensuelleLigne{parentQuittanceMensuelleLigne}
}

/**
* Quittance Mensuelle Impot Sous Ligne
*/

entity QuittanceMensuelleSousLigne {
    montantBase BigDecimal,
    montantTotal BigDecimal
}

relationship ManyToOne {
    //QuittanceMensuelleSousLigne{quittanceMensuelleLigne required} to QuittanceMensuelleLigne,
    QuittanceMensuelleSousLigne{impotMensuelLigne(id) required} to ImpotMensuelLigne
}

/**
* Declaration Annuelle
*/

entity DeclarationAnnuelle {
	annee Integer required,
    datePaiement LocalDate,
    numeroQuittance String,
	montantChiffreAffaireHT BigDecimal,
    montantChiffreAffaireExport BigDecimal,
    montantChiffreAffaireLocal BigDecimal,
    montantChiffreAffaireTTC BigDecimal,
    montantResultatComptable BigDecimal,
    montantResultatFiscal BigDecimal,
    montantAutreDeduction BigDecimal,
    montantBaseImposable BigDecimal,
    montantImpotLiquide BigDecimal,
    montantAcompteProvisionnel BigDecimal,
    montantRetenueSource BigDecimal,
    montantNetAPaye BigDecimal,
}

relationship ManyToOne {
    DeclarationAnnuelle{ficheClient(designation) required} to FicheClient,
}

/**
* Declaration Employeur Annuelle
*/

entity DeclarationEmployeurAnnuelle {
	annee Integer required,
	montantAnnexe1 BigDecimal,
    montantAnnexe2 BigDecimal,
    montantAnnexe3 BigDecimal,
    montantAnnexe4 BigDecimal,
    montantAnnexe5 BigDecimal,
    montantAnnexe6 BigDecimal,
    montantAnnexe7 BigDecimal,
    montantAnnexe8 BigDecimal,
    montantAnnexe9 BigDecimal,
    montantAnnexe10 BigDecimal,
    montantAnnexe11 BigDecimal,
    montantAnnexe12 BigDecimal
}

relationship ManyToOne {
    DeclarationEmployeurAnnuelle{ficheClient(designation) required} to FicheClient,
}


/**
* Categorie Cnss Gerant
*/

entity CategorieCnssGerant {
    code String required,
    libelle String required,
    description String,
    montantCotisationCnss BigDecimal required
}

/**
* Decalration Annuelle
*/

entity DeclarationAnnuelle {
    typeDeclaration TypeDeclaration , //default TypeDeclaration.DECLARATION_INITIALE required,
    annee Integer required,
    datePaiement LocalDate,
    numeroQuittance String,
    montantImpotAnnuel  BigDecimal , //default BigDecimal.ZERO,
    montantApPayes  BigDecimal , //default BigDecimal.ZERO,
    montantRetenueSource  BigDecimal , //default BigDecimal.ZERO,
    montantReportAnterieur  BigDecimal , //default BigDecimal.ZERO,
    montantNet  BigDecimal , //default BigDecimal.ZERO,
    statut StatutDeclaration required  , //default StatutDeclaration.BROUILLON,
    //private List<DecalrationAnnuelleLigne> declarationAnnuelleLignes = new ArrayList<>();
}
relationship ManyToOne {
    DeclarationAnnuelle{ficheClient(designation) required} to FicheClient
}

relationship OneToMany{
     DeclarationAnnuelle{declarationAnnuelleLigne} to DecalrationAnnuelleLigne{declarationAnnuelle}
}

/**
* Decalration Annuelle Ligne
*/

entity DecalrationAnnuelleLigne {
    code String required,
    triOrdre Integer,
    calcule Boolean,
    montant BigDecimal,
    montantCalcule BigDecimal,
    libelle String required,
    description String
}
relationship ManyToOne {
    DecalrationAnnuelleLigne{impotAnnuel(id) required} to ImpotAnnuel,
    //DecalrationAnnuelleLigne{declarationAnnuelle(id) required} to DeclarationAnnuelle,
}

/**
* Acompte Provisionnel
*/

entity AcompteProvisionnel {
	annee Integer required,
    numero Integer required,
    date LocalDate,
    numeroQuittance String,
	montantBase BigDecimal,
    montantAcompteProvisionnel BigDecimal,
    montantReportAnterieur BigDecimal,
    montantRetenueSource BigDecimal,
    montantNet BigDecimal,
	typeDeclaration TypeDeclaration , //default TypeDeclaration.DECLARATION_INITIALE required,
    montantNet BigDecimal,
    statut StatutDeclaration required  , //default StatutDeclaration.BROUILLON,
}
relationship ManyToOne {
    AcompteProvisionnel{ficheClient(designation) required} to FicheClient
}

/**
* ImpotAnnuel
*/

entity ImpotAnnuel {
    code String required,
    libelle String required,
    description String,
    calcule Boolean , //default false,
    triOrdre Integer,
    //private List<ImpotAnnuelLigne> impotAnnuelLignes = new ArrayList<>();
}
relationship OneToMany{
     ImpotAnnuel{impotAnnuelLigne required} to ImpotAnnuelLigne{impotAnnuel}
}

/**
* ImpotAnnuelLigne
*/
entity ImpotAnnuelLigne {
    coefficient Float required , //default 1f
}
relationship ManyToOne {
    //ImpotAnnuelLigne{impotAnnuel(id) required} to ImpotAnnuel,
    ImpotAnnuelLigne{impotMensuel(id) required} to ImpotMensuel
}

/**
* ImpotMensuelLigne
*/

entity ImpotMensuelLigne {
    code String required,
	libelle String required,
	description String,
    triOrdre Integer,
    valeur Float,
    typeValeur TypeValeur required , //default TypeValeur.TAUX,
    valeurModifiable Boolean , //default false
}
//relationship ManyToOne {
//    ImpotMensuelLigne{impotMensuel(id) required} to ImpotMensuel
//}


/**
* Secteur activite
*/

entity SecteurActivite {
    code String required,
    libelle String required,
    description String
}

/**
* Cabinet Comptable
*/
entity CabinetComptable {
	code String required,
	nombreLicense Integer,
}

relationship OneToOne {
  /** s'il s'agit de la fichie client du cabinet comptable lui même */
  CabinetComptable{ficheClientCabinet(id)} to FicheClient{clientTypeComptableInfo}
}

relationship OneToMany {
  /** list des clients du cabinet comptable */
  CabinetComptable{client} to FicheClient{cabinetComptable}
}

/**
* Caisse client
*/

entity Caisse {
    montantTotal BigDecimal,
    montantReport BigDecimal,
    cloturee Boolean
}

relationship OneToMany {
  Caisse{ligneCaisse} to LigneCaisse{caisse}
}

relationship ManyToOne {
  Caisse{ficheClient(designation) required} to FicheClient
}


/**
* Ligne caisse
*/

entity LigneCaisse {
	/** typeOperation 1 si Encaissement -1 si decaissement */
    typeOperation Integer required,
    libelle String required,
    montantOperation BigDecimal
}

relationship ManyToOne {
  LigneCaisse{quittanceMensuelle(id)} to QuittanceMensuelle,
  LigneCaisse{declarationAnnuelle(id)} to DeclarationAnnuelle,
  LigneCaisse{cnss(id)} to Cnss,
}

dto * with mapstruct
service * with serviceClass
paginate * with pagination
